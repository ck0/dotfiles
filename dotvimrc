let s:UserBundles="$HOME/.vim/bundles.vim"
let s:UserArpeggioRemaps="$HOME/.vim/arpeggio_remaps.vim"

set nocompatible

" *vundle-managed plugins* {{{
filetype off                   " required for vundle, turn it back on later
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" yo dawg
Bundle 'gmarik/vundle'

" bundles that aren't vundle
execute 'source'.expand(s:UserBundles)
" }}}

" my preferred settings for text files, should be overridden if vim picks up
" the filetype
set tabstop=4
set shiftwidth=4
set expandtab

syntax on
filetype plugin indent on

set t_Co=256
colorscheme wombat256mod

set number
set ruler

set ignorecase
set smartcase

set hlsearch
set incsearch

set smarttab
set autoindent
set smartindent

" see `:h si`
inoremap # X#

set mouse=a
" TODO: not sure if this is still right for iTerm2...
set ttymouse=xterm2

" unnamedplus fails under MacOS
set clipboard=unnamed
"set clipboard=unnamedplus

set backspace=indent,eol,start

set scrolloff=2
set sidescrolloff=2

set autoread

set nowritebackup               " don't bother making backups
set nobackup                    " ...let alone saving them
set directory=$HOME/.vim/swap// " stop littering .sw*s

set undofile                  " persistent undo!
set undodir=$HOME/.vim/undo//

set magic " less escaping

set listchars=tab:>-,trail:*
set list

set virtualedit=block,onemore

set hidden

set noerrorbells
set novisualbell

set wildmenu                            " get wild
set wildignorecase                      " like it sounds
set wildmode=longest:full               " prefix matching for wildmenu
set completeopt+=longest                " insert up to the matched prefix
set wildignore+=*.class,*.o,*.pyc,*.git " unlikely to want to match these

set guioptions= " for (blegh) gvim

set history=100000
set cmdwinheight=20

set tags=./tags,tags " look in the dir of the open file, then in pwd

let mapleader = ","
let g:mapleader = ","

" *handy functions* {{{1 
function! SetExpandTab(width)
	let &shiftwidth=a:width
	let &tabstop=a:width
	set expandtab
endfunction

function! GrepFor()
	execute 'Rgrep '.expand("<cWORD>")
endfunction
" }}}

" *plugin options* {{{1 
" *Taglist* {{{2 
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
let Tlist_Show_One_File = 1
" }}}

" *Command-T* {{{2 
let g:CommandTMaxHeight=20
let g:CommandTScanDotDirectories=1
let g:CommandTCancelMap=['<Esc>', '<C-c>']
" }}}

" *Grep* {{{2 
let Grep_Find_Use_Xargs = 0         " because MacOS's `xargs` isn't really
let Grep_Xargs_Options = '--print0' " ...not that it matters
" }}}

" *Supertab* {{{2 
let g:SuperTabDefaultCompletionType = "<C-x><C-o>"
let g:SuperTabDefaultCompletionType = "context"
" }}}
" }}}

" TODO: default to normal `gD` if we don't have a tags file
noremap gD <C-]>

" *remaps* {{{1 
noremap <Space> i

""nmap gh <S-h>
"nnoremap <S-h> <C-o>
""nmap gl <S-h>
"nnoremap <S-l> <Tab>

" because there's no setting verymagic
" cnoremap s/ s/\v

noremap Q q:

"" bulldoze overprivileged files
"cnoremap W w !sudo tee % > /dev/null

" stop it, you're not using eclipse
inoremap <C-Space> <Esc>:sl<CR><CR>

nmap <Leader>f :Rgrep <C-R><C-W>

nnoremap <silent> <Leader>t :CommandT<CR>
nnoremap <silent> <Leader>b :CommandTBuffer<CR>
" }}}

" *statusline* {{{1 
"see :h fugitive-statusline
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

set statusline+=%<%f%=%([%{Tlist_Get_Tagname_By_Line()}]%)

set statusline+=%{SyntasticStatuslineFlag()}

set laststatus=2 " always show the statusline
" }}}

" keychords!
call arpeggio#load()
execute 'source'.expand(s:UserArpeggioRemaps)

"supposed to let me `gf` to imports, doesn't
"from http://sontek.net/python-with-a-modular-ide-vim
"wow TODO: http://sontek.net/turning-vim-into-a-modern-python-ide
python << EOF
import os
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF


" from https://dev.launchpad.net/UltimateVimPythonSetup
" also TODO: ^

" Use F7/Shift-F7 to add/remove a breakpoint (pdb.set_trace)
" Totally cool.
python << EOF
# def SetBreakpoint():
#     import re
#     nLine = int( vim.eval( 'line(".")'))
# 
#     strLine = vim.current.line
#     strWhite = re.search( '^(\s*)', strLine).group(1)
# 
#     vim.current.buffer.append(
#        "%(space)spdb.set_trace() %(mark)s Breakpoint %(mark)s" %
#          {'space':strWhite, 'mark': '#' * 30}, nLine - 1)
# 
#     for strLine in vim.current.buffer:
#         if strLine == "import pdb":
#             break
#     else:
#         vim.current.buffer.append( 'import pdb', 0)
#         vim.command( 'normal j1')
# 
# vim.command( 'map <F8> :py SetBreakpoint()<cr>')
# 
# def RemoveBreakpoints():
#     import re
# 
#     nCurrentLine = int( vim.eval( 'line(".")'))
# 
#     nLines = []
#     nLine = 1
#     for strLine in vim.current.buffer:
#         if strLine == "import pdb" or strLine.lstrip()[:15] == "pdb.set_trace()":
#             nLines.append( nLine)
#         nLine += 1
# 
#     nLines.reverse()
# 
#     for nLine in nLines:
#         vim.command( "normal %dG" % nLine)
#         vim.command( "normal dd")
#         if nLine < nCurrentLine:
#             nCurrentLine -= 1
# 
#     vim.command( "normal %dG" % nCurrentLine)
# 
# vim.command( "map <F9> :py RemoveBreakpoints()<cr>")
EOF

" vim:foldmethod=marker
" vim:noet:sw=2 ts=2
